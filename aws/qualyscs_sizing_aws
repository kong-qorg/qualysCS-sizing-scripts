#!/usr/bin/env bash
# This script was generated by bashly 0.9.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
qualyscs_sizing_aws_usage() {
  if [[ -n $long_usage ]]; then
    printf "qualyscs_sizing_aws - Sample application\n"
    echo

  else
    printf "qualyscs_sizing_aws - Sample application\n"
    echo

  fi

  printf "Usage:\n"
  printf "  qualyscs_sizing_aws COMMAND\n"
  printf "  qualyscs_sizing_aws [COMMAND] --help | -h\n"
  printf "  qualyscs_sizing_aws --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  general    Generate sizing for General Sensor(s)"
  echo "  registry   Generate sizing for Registry Sensor(s)"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  API_KEY"
    printf "    Set your API key\n"
    echo

  fi
}

# :command.usage
qualyscs_sizing_aws_general_usage() {
  if [[ -n $long_usage ]]; then
    printf "qualyscs_sizing_aws general - Generate sizing for General Sensor(s)\n"
    echo

  else
    printf "qualyscs_sizing_aws general - Generate sizing for General Sensor(s)\n"
    echo

  fi

  printf "Usage:\n"
  printf "  qualyscs_sizing_aws general [OUTPUT]\n"
  printf "  qualyscs_sizing_aws general --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  OUTPUT"
    printf "    output file\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  cli general\n"
    printf "  cli general -output output.txt\n"
    echo

  fi
}

# :command.usage
qualyscs_sizing_aws_registry_usage() {
  if [[ -n $long_usage ]]; then
    printf "qualyscs_sizing_aws registry - Generate sizing for Registry Sensor(s)\n"
    echo

  else
    printf "qualyscs_sizing_aws registry - Generate sizing for Registry Sensor(s)\n"
    echo

  fi

  printf "Usage:\n"
  printf "  qualyscs_sizing_aws registry [OUTPUT]\n"
  printf "  qualyscs_sizing_aws registry --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  OUTPUT"
    printf "    output file\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  cli registry\n"
    printf "  cli registry -output output.txt\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/yaml.sh
yaml_load() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
  local fs

  fs=$(echo @ | tr @ '\034')

  sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
    }'
}

# :command.command_functions
# :command.function
qualyscs_sizing_aws_general_command() {
  # src/general_command.sh
  #!/bin/bash


  if ! type "jq" > /dev/null; then
    echo "Error: jq not installed or not in execution path, jq is required for script execution."
    exit 1
  fi

  resetAccountCounters() {
    EC2_INSTANCE_COUNT=0
    ECS_FARGATE_TASK_COUNT=0

  }
  resetGlobalCounters() {
    	EKS_INSTANCE_COUNT_GLOBAL=0
  	ECS_INSTANCE_COUNT_GLOBAL=0
  	ECS_FARGATE_TASK_COUNT_GLOBAL=0

  	USE_AWS_ORG=false
  }

  getAccountList() {
    if [ "${USE_AWS_ORG}" = "true" ]; then
      echo "###################################################################################"
      echo "Querying AWS Organization"
      MASTER_ACCOUNT_ID=$(aws_organizations_describe_organization | jq -r '.Organization.MasterAccountId' 2>/dev/null)
      if [ $? -ne 0 ] || [ -z "${MASTER_ACCOUNT_ID}" ]; then
        logErrorExit "Error: Failed to describe AWS Organization, check aws cli setup, and access to the AWS Organizations API."
      fi
      # Save current environment variables of the master account.
      MASTER_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      MASTER_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      MASTER_AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
      #
      ACCOUNT_LIST=$(aws_organizations_list_accounts)
      if [ $? -ne 0 ] || [ -z "${ACCOUNT_LIST}" ]; then
        error_and_exit "Error: Failed to list AWS Organization accounts, check aws cli setup, and access to the AWS Organizations API."
      fi
      TOTAL_ACCOUNTS=$(echo "${ACCOUNT_LIST}" | jq '.Accounts | length' 2>/dev/null)
      echo "  Total number of member accounts: ${TOTAL_ACCOUNTS}"
      echo "###################################################################################"
      echo ""
    else
      MASTER_ACCOUNT_ID=""
      ACCOUNT_LIST=""
      TOTAL_ACCOUNTS=1
    fi
  }

  getRegionList() {

    REGIONS=$(aws_ec2_describe_regions | jq -r '.Regions[] | .RegionName' 2>/dev/null | sort)

    XIFS=$IFS
    # shellcheck disable=SC2206
    IFS=$'\n' REGION_LIST=($REGIONS)
    IFS=$XIFS

    if [ ${#REGION_LIST[@]} -eq 0 ]; then
      echo "  Warning: Using default region list"
      REGION_LIST=(us-east-1 us-east-2 us-west-1 us-west-2 ap-south-1 ap-northeast-1 ap-northeast-2 ap-southeast-1 ap-southeast-2 eu-north-1 eu-central-1 eu-west-1 sa-east-1 eu-west-2 eu-west-3 ca-central-1)
    fi
    echo "###################################################################################"
    echo "  Total number of regions: ${#REGION_LIST[@]}"
    echo "###################################################################################"
    echo ""
  }
  logErrorExit() {
    echo
    echo "ERROR: ${1}"
    echo
    exit 1
  }

  aws_organizations_describe_organization() {
    RESULT=$(aws organizations describe-organization --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    fi
  }

  aws_organizations_list_accounts() {
    RESULT=$(aws organizations list-accounts --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    fi
  }

  aws_sts_assume_role() {
    RESULT=$(aws sts assume-role --role-arn="${1}" --role-session-name=pcs-sizing-script --duration-seconds=999 --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    fi
  }
  aws_ec2_describe_instances() {
    RESULT=$(aws ec2 describe-instances --max-items 99999 --region="${1}" --filters "Name=instance-state-name,Values=running" --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    else
      echo '{"Error": [] }'
    fi
  }
  aws_ec2_describe_regions() {
    RESULT=$(aws ec2 describe-regions --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    fi
  }
  aws_ecs_list_clusters() {
    RESULT=$(aws ecs list-clusters --max-items 99999 --region="${1}" --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    else
      echo '{"Error": [] }'
    fi
  }

  aws_ecs_list_tasks() {
    RESULT=$(aws ecs list-tasks --max-items 99999 --region "${1}" --cluster "${2}" --desired-status running --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    else
      echo '{"Error": [] }'
    fi
  }

  get_ecs_fargate_task_count() {
    REGION=$1
    ECS_FARGATE_CLUSTERS=$(aws_ecs_list_clusters "${REGION}")

    XIFS=$IFS
    # shellcheck disable=SC2206
    IFS=$'\n' ECS_FARGATE_CLUSTERS_LIST=($ECS_FARGATE_CLUSTERS)
    IFS=$XIFS

    ECS_FARGATE_TASK_LIST_COUNT=0
    RESULT=0

    for CLUSTER in "${ECS_FARGATE_CLUSTERS_LIST[@]}"
    do
      ECS_FARGATE_TASK_LIST_COUNT=($(aws_ecs_list_tasks "${REGION}" --cluster "${CLUSTER}" --desired-status running --output json | jq -r '[.taskArns[]] | length' 2>/dev/null))
      RESULT=$((RESULT + ECS_FARGATE_TASK_LIST_COUNT))
    done
    echo "${RESULT}"
  }
  aws_eks_list_clusters() {
    RESULT=$(aws eks list-clusters --max-items 99999 --region="${1}" --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    else
      echo '{"Error": [] }'
    fi
  }

  # aws_eks_describe_cluster() {
  #   RESULT=$(aws eks describe-cluster --name="${1}" --output json 2>/dev/null)
  #   if [ $? -eq 0 ]; then
  #     echo "${RESULT}"
  #   else
  #     echo '{"Error": [] }'
  #     exit -1
  #   fi
  # }
  computeResourceSizing(){
    resetAccountCounters
    resetGlobalCounters

     for ((ACCOUNT_INDEX=0; ACCOUNT_INDEX<=(TOTAL_ACCOUNTS-1); ACCOUNT_INDEX++))
    do
      if [ "${USE_AWS_ORG}" = "true" ]; then
        ACCOUNT_NAME=$(echo "${ACCOUNT_LIST}" | jq -r .Accounts["${ACCOUNT_INDEX}"].Name 2>/dev/null)
        ACCOUNT_ID=$(echo "${ACCOUNT_LIST}"   | jq -r .Accounts["${ACCOUNT_INDEX}"].Id   2>/dev/null)
        ASSUME_ROLE_ERROR=""
        assume_role "${ACCOUNT_NAME}" "${ACCOUNT_ID}"
        if [ -n "${ASSUME_ROLE_ERROR}" ]; then
          continue
        fi
      fi

      echo "###################################################################################"
      echo "Running EKS Instances"
      for i in "${REGION_LIST[@]}"
      do
        RESOURCE_COUNT="0" # reset
        CLUSTERS_JSON=$(aws_eks_list_clusters "${i}" | jq '.clusters'  2>/dev/null)
        RESOURCE_COUNT=$(echo $CLUSTERS_JSON | jq '. | length' 2>/dev/null)
        echo "  Total # of Running EKS Clusters in Region ${i}: ${RESOURCE_COUNT}"
        EKS_CLUSTER_COUNT=$((EKS_CLUSTER_COUNT + RESOURCE_COUNT))

        if  [ $((RESOURCE_COUNT)) -ne 0 ]; then # only proceed if resource is not equal zero
  	  for row in $(echo $CLUSTERS_JSON | jq -r '.[] ');

  	    do
  		# TODO - extract relevant information about the clusters - such as number of nodes,

  		# k8s versions.
     		cluster_name=$row
      	CLUSTER_OUTPUT=$(aws eks describe-cluster --name=$cluster_name --output json 2>/dev/null)
      	mkdir -p ./output
  	    echo $CLUSTER_OUTPUT > ./output/${row}-cluster-info.json
          # https://docs.aws.amazon.com/cli/latest/reference/eks/describe-cluster.html
          # https://docs.aws.amazon.com/eks/latest/userguide/eks-compute.html
          NODEGROUP_OUTPUT=$(aws eks list-nodegroups --cluster-name=$cluster_name --output json 2>/dev/null)
      	mkdir -p ./output
  	    echo $NODEGROUP_OUTPUT > ./output/${row}-nodegroups.json
  	  done
        fi

      done
      echo "Total EKS Instances across all regions: ${EKS_CLUSTER_COUNT}"
      echo "###################################################################################"

      EKS_INSTANCE_COUNT_GLOBAL=${EKS_CLUSTER_COUNT}

      echo "###################################################################################"
      echo "ECS Fargate Tasks"
      for i in "${REGION_LIST[@]}"
      do
         RESOURCE_COUNT=$(get_ecs_fargate_task_count "${i}")
         echo "  Count of Running ECS Tasks in Region ${i}: ${RESOURCE_COUNT}"
         ECS_FARGATE_TASK_COUNT=$((ECS_FARGATE_TASK_COUNT + RESOURCE_COUNT))
      done
      echo "Total ECS Fargate Task Count (Instances) across all regions: ${ECS_FARGATE_TASK_COUNT}"
      echo "###################################################################################"
      echo ""

      #reset_account_counters

      if [ "${USE_AWS_ORG}" = "true" ]; then
        unassume_role
      fi
    done

  }

  # echo "# this file is located in 'src/qualyscs_sizing_aws_command.sh'"
  # echo "# code for 'qualyscs_sizing_aws qualyscs_sizing_aws' goes here"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  # inspect_args
  #ECS_FARGATE_CLUSTERS=$(aws_ecs_list_clusters "${REGION}")
  #EKS_INSTANCE_COUNT_GLOBAL=$(aws_eks_list_clusters "${REGION}")

  echo "###################################################################################"
  echo "Running Qualys Container Security - Sizing tool for AWS "
  echo "###################################################################################"

  getAccountList
  getRegionList
  computeResourceSizing

  ECS_FARGATE_TASK_COUNT_GLOBAL = $(get_ecs_fargate_task_count)

  echo "###################################################################################"
  echo "AWS EKS Cluster:"
  echo "  Total # of ECS Fargate Task Instances:     ${ECS_FARGATE_TASK_COUNT_GLOBAL}"
  echo "  Total # of EKS Instances:     ${EKS_INSTANCE_COUNT_GLOBAL}"

  echo ""
  echo "###################################################################################"

}

# :command.function
qualyscs_sizing_aws_registry_command() {
  # src/registry_command.sh
  #!/bin/bash


  if ! type "jq" > /dev/null; then
    echo "Error: jq not installed or not in execution path, jq is required for script execution."
    exit 1
  fi

  resetAccountCounters() {
    EC2_INSTANCE_COUNT=0
    ECS_FARGATE_TASK_COUNT=0

  }
  resetGlobalCounters() {
    	EKS_INSTANCE_COUNT_GLOBAL=0
  	ECS_INSTANCE_COUNT_GLOBAL=0
  	ECS_FARGATE_TASK_COUNT_GLOBAL=0

  	USE_AWS_ORG=false
  }

  getAccountList() {
    if [ "${USE_AWS_ORG}" = "true" ]; then
      echo "###################################################################################"
      echo "Querying AWS Organization"
      MASTER_ACCOUNT_ID=$(aws_organizations_describe_organization | jq -r '.Organization.MasterAccountId' 2>/dev/null)
      if [ $? -ne 0 ] || [ -z "${MASTER_ACCOUNT_ID}" ]; then
        logErrorExit "Error: Failed to describe AWS Organization, check aws cli setup, and access to the AWS Organizations API."
      fi
      # Save current environment variables of the master account.
      MASTER_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      MASTER_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      MASTER_AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
      #
      ACCOUNT_LIST=$(aws_organizations_list_accounts)
      if [ $? -ne 0 ] || [ -z "${ACCOUNT_LIST}" ]; then
        error_and_exit "Error: Failed to list AWS Organization accounts, check aws cli setup, and access to the AWS Organizations API."
      fi
      TOTAL_ACCOUNTS=$(echo "${ACCOUNT_LIST}" | jq '.Accounts | length' 2>/dev/null)
      echo "  Total number of member accounts: ${TOTAL_ACCOUNTS}"
      echo "###################################################################################"
      echo ""
    else
      MASTER_ACCOUNT_ID=""
      ACCOUNT_LIST=""
      TOTAL_ACCOUNTS=1
    fi
  }

  getRegionList() {

    REGIONS=$(aws_ec2_describe_regions | jq -r '.Regions[] | .RegionName' 2>/dev/null | sort)

    XIFS=$IFS
    # shellcheck disable=SC2206
    IFS=$'\n' REGION_LIST=($REGIONS)
    IFS=$XIFS

    if [ ${#REGION_LIST[@]} -eq 0 ]; then
      echo "  Warning: Using default region list"
      REGION_LIST=(us-east-1 us-east-2 us-west-1 us-west-2 ap-south-1 ap-northeast-1 ap-northeast-2 ap-southeast-1 ap-southeast-2 eu-north-1 eu-central-1 eu-west-1 sa-east-1 eu-west-2 eu-west-3 ca-central-1)
    fi
    echo "###################################################################################"
    echo "  Total number of regions: ${#REGION_LIST[@]}"
    echo "###################################################################################"
    echo ""
  }
  logErrorExit() {
    echo
    echo "ERROR: ${1}"
    echo
    exit 1
  }

  aws_organizations_describe_organization() {
    RESULT=$(aws organizations describe-organization --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    fi
  }

  aws_organizations_list_accounts() {
    RESULT=$(aws organizations list-accounts --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    fi
  }

  aws_sts_assume_role() {
    RESULT=$(aws sts assume-role --role-arn="${1}" --role-session-name=pcs-sizing-script --duration-seconds=999 --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    fi
  }
  aws_ec2_describe_instances() {
    RESULT=$(aws ec2 describe-instances --max-items 99999 --region="${1}" --filters "Name=instance-state-name,Values=running" --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    else
      echo '{"Error": [] }'
    fi
  }
  aws_ec2_describe_regions() {
    RESULT=$(aws ec2 describe-regions --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    fi
  }
  aws_ecs_list_clusters() {
    RESULT=$(aws ecs list-clusters --max-items 99999 --region="${1}" --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    else
      echo '{"Error": [] }'
    fi
  }

  aws_ecs_list_tasks() {
    RESULT=$(aws ecs list-tasks --max-items 99999 --region "${1}" --cluster "${2}" --desired-status running --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    else
      echo '{"Error": [] }'
    fi
  }

  get_ecs_fargate_task_count() {
    REGION=$1
    ECS_FARGATE_CLUSTERS=$(aws_ecs_list_clusters "${REGION}")

    XIFS=$IFS
    # shellcheck disable=SC2206
    IFS=$'\n' ECS_FARGATE_CLUSTERS_LIST=($ECS_FARGATE_CLUSTERS)
    IFS=$XIFS

    ECS_FARGATE_TASK_LIST_COUNT=0
    RESULT=0

    for CLUSTER in "${ECS_FARGATE_CLUSTERS_LIST[@]}"
    do
      ECS_FARGATE_TASK_LIST_COUNT=($(aws_ecs_list_tasks "${REGION}" --cluster "${CLUSTER}" --desired-status running --output json | jq -r '[.taskArns[]] | length' 2>/dev/null))
      RESULT=$((RESULT + ECS_FARGATE_TASK_LIST_COUNT))
    done
    echo "${RESULT}"
  }
  aws_eks_list_clusters() {
    RESULT=$(aws eks list-clusters --max-items 99999 --region="${1}" --output json 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "${RESULT}"
    else
      echo '{"Error": [] }'
    fi
  }

  # aws_eks_describe_cluster() {
  #   RESULT=$(aws eks describe-cluster --name="${1}" --output json 2>/dev/null)
  #   if [ $? -eq 0 ]; then
  #     echo "${RESULT}"
  #   else
  #     echo '{"Error": [] }'
  #     exit -1
  #   fi
  # }
  computeResourceSizing(){
    resetAccountCounters
    resetGlobalCounters

     for ((ACCOUNT_INDEX=0; ACCOUNT_INDEX<=(TOTAL_ACCOUNTS-1); ACCOUNT_INDEX++))
    do
      if [ "${USE_AWS_ORG}" = "true" ]; then
        ACCOUNT_NAME=$(echo "${ACCOUNT_LIST}" | jq -r .Accounts["${ACCOUNT_INDEX}"].Name 2>/dev/null)
        ACCOUNT_ID=$(echo "${ACCOUNT_LIST}"   | jq -r .Accounts["${ACCOUNT_INDEX}"].Id   2>/dev/null)
        ASSUME_ROLE_ERROR=""
        assume_role "${ACCOUNT_NAME}" "${ACCOUNT_ID}"
        if [ -n "${ASSUME_ROLE_ERROR}" ]; then
          continue
        fi
      fi

      echo "###################################################################################"
      echo "Detecting AWS ECR"
      for i in "${REGION_LIST[@]}"
      do
        RESOURCE_COUNT="0" # reset
        CLUSTERS_JSON=$(aws_eks_list_clusters "${i}" | jq '.clusters'  2>/dev/null)
        RESOURCE_COUNT=$(echo $CLUSTERS_JSON | jq '. | length' 2>/dev/null)
        echo "  Total # of Running EKS Clusters in Region ${i}: ${RESOURCE_COUNT}"
        EKS_CLUSTER_COUNT=$((EKS_CLUSTER_COUNT + RESOURCE_COUNT))

        if  [ $((RESOURCE_COUNT)) -ne 0 ]; then # only proceed if resource is not equal zero
  	  for row in $(echo $CLUSTERS_JSON | jq -r '.[] ');

  	    do
  		# TODO - extract relevant information about the clusters - such as number of nodes,

  		# k8s versions.
     		cluster_name=$row
      	CLUSTER_OUTPUT=$(aws eks describe-cluster --name=$cluster_name --output json 2>/dev/null)
      	mkdir -p ./output
  	    echo $CLUSTER_OUTPUT > ./output/${row}-cluster-info.json
          # https://docs.aws.amazon.com/cli/latest/reference/eks/describe-cluster.html
          # https://docs.aws.amazon.com/eks/latest/userguide/eks-compute.html
          NODEGROUP_OUTPUT=$(aws eks list-nodegroups --cluster-name=$cluster_name --output json 2>/dev/null)
      	mkdir -p ./output
  	    echo $NODEGROUP_OUTPUT > ./output/${row}-nodegroups.json
  	  done
        fi

      done
      echo "Total EKS Instances across all regions: ${EKS_CLUSTER_COUNT}"
      echo "###################################################################################"

      #reset_account_counters

      if [ "${USE_AWS_ORG}" = "true" ]; then
        unassume_role
      fi
    done

  }

  # echo "# this file is located in 'src/qualyscs_sizing_aws_command.sh'"
  # echo "# code for 'qualyscs_sizing_aws qualyscs_sizing_aws' goes here"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  # inspect_args
  #ECS_FARGATE_CLUSTERS=$(aws_ecs_list_clusters "${REGION}")
  #EKS_INSTANCE_COUNT_GLOBAL=$(aws_eks_list_clusters "${REGION}")

  echo "###################################################################################"
  echo " Qualys Container Security - Sizing tool for AWS "
  echo " For AWS ECR Registry"
  echo "###################################################################################"

  getAccountList
  getRegionList
  computeResourceSizing

  echo "###################################################################################"
  # echo "AWS EKS Cluster:"
  # echo "  Total # of ECS Fargate Task Instances:     ${ECS_FARGATE_TASK_COUNT_GLOBAL}"
  # echo "  Total # of EKS Instances:     ${EKS_INSTANCE_COUNT_GLOBAL}"

  echo ""
  echo "###################################################################################"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        qualyscs_sizing_aws_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*)
      ;;

    general)
      action="general"
      shift
      qualyscs_sizing_aws_general_parse_requirements "$@"
      shift $#
      ;;

    registry)
      action="registry"
      shift
      qualyscs_sizing_aws_registry_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      qualyscs_sizing_aws_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
qualyscs_sizing_aws_general_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        qualyscs_sizing_aws_general_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="general"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args[output]+x} ]]; then

          args[output]=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
qualyscs_sizing_aws_registry_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        qualyscs_sizing_aws_registry_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="registry"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args[output]+x} ]]; then

          args[output]=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "general")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        qualyscs_sizing_aws_general_usage
      else
        qualyscs_sizing_aws_general_command
      fi
      ;;

    "registry")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        qualyscs_sizing_aws_registry_usage
      else
        qualyscs_sizing_aws_registry_command
      fi
      ;;

    "root")
      root_command
      ;;

  esac
}

initialize
run "$@"
